name: Daily Spark Optimization

on:
  schedule:
    - cron: "30 11 * * *"   # daily 11:30 UTC ‚âà 7:30 AM ET
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  optimize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Java & Spark (local mode tests)
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk wget
          
          # Try multiple Spark versions in case one is unavailable
          SPARK_VERSIONS=("3.5.6" "3.5.5" "3.5.4" "3.5.3")
          SPARK_VER=""
          
          for version in "${SPARK_VERSIONS[@]}"; do
            echo "Trying Spark version: $version"
            if wget --spider https://downloads.apache.org/spark/spark-${version}/spark-${version}-bin-hadoop3.tgz 2>/dev/null; then
              SPARK_VER=$version
              echo "Found available Spark version: $SPARK_VER"
              break
            fi
          done
          
          if [ -z "$SPARK_VER" ]; then
            echo "‚ùå No available Spark version found. Using PySpark from pip instead."
            echo "SPARK_HOME=" >> $GITHUB_ENV
            echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          else
            echo "üì¶ Downloading Spark $SPARK_VER..."
            wget https://downloads.apache.org/spark/spark-${SPARK_VER}/spark-${SPARK_VER}-bin-hadoop3.tgz
            tar xf spark-${SPARK_VER}-bin-hadoop3.tgz
            sudo mv spark-${SPARK_VER}-bin-hadoop3 /opt/spark
            echo "SPARK_HOME=/opt/spark" >> $GITHUB_ENV
            echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
            echo "$SPARK_HOME/bin" >> $GITHUB_PATH
            
            # Clean up downloaded files
            rm -f spark-${SPARK_VER}-bin-hadoop3.tgz
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install openai>=1.35.0 tiktoken>=0.7.0 pygithub>=2.3.0

      - name: Run LLM optimization
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running LLM optimization..."
          python scripts/optimize_with_llm.py
          echo "LLM optimization completed."
          
          # Show what files exist after optimization
          echo "Files in current directory:"
          ls -la
          
          # Show git status
          echo "Git status:"
          git status

      - name: Run tests
        env:
          PYSPARK_PYTHON: python
        run: |
          if [ -d "tests" ]; then
            # Run all tests - PySpark tests will be skipped if not available
            python -m pytest tests/ -q --tb=short || echo "Some tests failed or were skipped"
            echo "Tests completed."
          else
            echo "No tests found; skipping."
          fi

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Clean up large files
        run: |
          # Remove Spark binary files and other unwanted files before committing
          find . -name "spark-*.tgz" -type f -delete || true
          find . -name "spark-*-bin-*" -type d -exec rm -rf {} + || true
          find . -name "*.tgz" -type f -delete || true
          
          # Remove any files larger than 50MB (safety check)
          find . -type f -size +50M -delete || true
          
          # Clean up any temporary files
          find . -name "*.tmp" -type f -delete || true
          find . -name "*.temp" -type f -delete || true
          
          echo "Cleanup completed."

      - name: Commit changes (if any)
        id: commit
        run: |
          
          # Check if there are any meaningful changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            BR="llm-optimize-$(date +%Y%m%d)"
            
            # Check if branch already exists remotely
            if git ls-remote --heads origin "$BR" | grep -q "$BR"; then
              echo "‚ö†Ô∏è Branch $BR already exists remotely. Using timestamp suffix..."
              BR="${BR}-$(date +%H%M%S)"
              echo "üìù Using new branch name: $BR"
            fi
            
            git checkout -b "$BR"
            
            # Show what files have been modified
            echo "Modified files:"
            git status --porcelain
            
            # Add all modified files that are not in .gitignore
            git add .
            
            # Check if there are any staged changes
            if [ -n "$(git diff --cached --name-only)" ]; then
              # Final safety check - ensure no large files are being committed
              LARGE_FILES=$(find . -type f -size +10M | head -5)
              if [ -n "$LARGE_FILES" ]; then
                echo "‚ö†Ô∏è Warning: Large files detected:"
                echo "$LARGE_FILES"
                echo "Skipping commit to avoid large file issues."
                echo "branch=" >> "$GITHUB_OUTPUT"
                exit 0
              fi
              
              echo "Staged files for commit:"
              git diff --cached --name-only
              
              git commit -m "LLM: daily Spark optimizations"
              git push --set-upstream origin "$BR"
              echo "branch=$BR" >> "$GITHUB_OUTPUT"
            else
              echo "branch=" >> "$GITHUB_OUTPUT"
              echo "No meaningful changes to commit."
            fi
          else
            echo "branch=" >> "$GITHUB_OUTPUT"
            echo "No changes to commit."
          fi

      - name: Create Pull Request
        if: steps.commit.outputs.branch != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Alternative: Use personal access token if available
          # GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          TITLE="LLM: Daily Spark optimizations ($(date +%Y-%m-%d))"
          
          echo "üîó Creating pull request for branch: ${{ steps.commit.outputs.branch }}"
          echo "üìã PR Details:"
          echo "   Title: $TITLE"
          echo "   Base: main"
          echo "   Head: ${{ steps.commit.outputs.branch }}"
          
          # Try to create PR using GitHub CLI
          if command -v gh >/dev/null 2>&1; then
            echo "üöÄ Attempting to create PR with GitHub CLI..."
            if gh pr create \
              --title "$TITLE" \
              --body "ü§ñ **Automated LLM Optimizations**\n\nThis PR contains automated code improvements generated by our LLM optimization workflow.\n\n**Changes:**\n- Fixed deprecation warnings\n- Improved code quality\n- Enhanced performance patterns\n\n**Review:** Please review the changes and merge if approved." \
              --base main \
              --head "${{ steps.commit.outputs.branch }}" 2>/dev/null; then
              echo "‚úÖ Pull request created successfully!"
            else
              echo "‚ö†Ô∏è GitHub CLI PR creation failed (likely due to permissions)"
              echo "üìã Manual PR creation required:"
              echo "   üîó Visit: https://github.com/${{ github.repository }}/pull/new/${{ steps.commit.outputs.branch }}"
              echo "   üìù Title: $TITLE"
              echo "   üìÑ Body: Automated LLM optimizations"
            fi
          else
            echo "‚ö†Ô∏è GitHub CLI not available"
            echo "üìã Manual PR creation required:"
            echo "   üîó Visit: https://github.com/${{ github.repository }}/pull/new/${{ steps.commit.outputs.branch }}"
            echo "   üìù Title: $TITLE"
            echo "   üìÑ Body: Automated LLM optimizations"
          fi
          
          # Always provide the manual link
          echo ""
          echo "üîó **Manual PR Creation Link:**"
          echo "https://github.com/${{ github.repository }}/pull/new/${{ steps.commit.outputs.branch }}"
          echo ""
          echo "üìã **PR Details for Manual Creation:**"
          echo "Title: $TITLE"
          echo "Base: main"
          echo "Head: ${{ steps.commit.outputs.branch }}"
          echo "Body: Automated LLM optimizations"

      - name: Cleanup old branches (optional)
        if: always()
        run: |
          echo "üßπ Cleaning up old LLM optimization branches..."
          
          # List all remote branches that match our pattern and are older than 7 days
          OLD_BRANCHES=$(git for-each-ref --format='%(refname:short) %(committerdate:iso8601)' refs/remotes/origin/llm-optimize-* | \
            while read branch date; do
              # Extract date and check if older than 7 days
              branch_date=$(echo "$branch" | sed 's/llm-optimize-//' | sed 's/-[0-9]\{6\}$//')
              if [ -n "$branch_date" ]; then
                # Convert to timestamp and check if older than 7 days
                branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "0")
                current_timestamp=$(date +%s)
                days_old=$(( (current_timestamp - branch_timestamp) / 86400 ))
                
                if [ $days_old -gt 7 ]; then
                  echo "$branch"
                fi
              fi
            done)
          
          if [ -n "$OLD_BRANCHES" ]; then
            echo "üóëÔ∏è Found old branches to clean up:"
            echo "$OLD_BRANCHES"
            
            # Note: We can't delete remote branches from GitHub Actions without special permissions
            # This is just informational
            echo "üí° To clean up old branches, run manually:"
            echo "$OLD_BRANCHES" | while read branch; do
              echo "  git push origin --delete $branch"
            done
          else
            echo "‚úÖ No old branches to clean up."
          fi
